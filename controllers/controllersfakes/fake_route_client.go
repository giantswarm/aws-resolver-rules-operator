// Code generated by counterfeiter. DO NOT EDIT.
package controllersfakes

import (
	"context"
	"sync"

	"github.com/aws-resolver-rules-operator/controllers"
	"github.com/go-logr/logr"
)

type FakeRouteClient struct {
	AddRoutesStub        func(context.Context, *string, *string, []*string, string, string, logr.Logger) error
	addRoutesMutex       sync.RWMutex
	addRoutesArgsForCall []struct {
		arg1 context.Context
		arg2 *string
		arg3 *string
		arg4 []*string
		arg5 string
		arg6 string
		arg7 logr.Logger
	}
	addRoutesReturns struct {
		result1 error
	}
	addRoutesReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveRoutesStub        func(context.Context, *string, *string, []*string, string, string, logr.Logger) error
	removeRoutesMutex       sync.RWMutex
	removeRoutesArgsForCall []struct {
		arg1 context.Context
		arg2 *string
		arg3 *string
		arg4 []*string
		arg5 string
		arg6 string
		arg7 logr.Logger
	}
	removeRoutesReturns struct {
		result1 error
	}
	removeRoutesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRouteClient) AddRoutes(arg1 context.Context, arg2 *string, arg3 *string, arg4 []*string, arg5 string, arg6 string, arg7 logr.Logger) error {
	var arg4Copy []*string
	if arg4 != nil {
		arg4Copy = make([]*string, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.addRoutesMutex.Lock()
	ret, specificReturn := fake.addRoutesReturnsOnCall[len(fake.addRoutesArgsForCall)]
	fake.addRoutesArgsForCall = append(fake.addRoutesArgsForCall, struct {
		arg1 context.Context
		arg2 *string
		arg3 *string
		arg4 []*string
		arg5 string
		arg6 string
		arg7 logr.Logger
	}{arg1, arg2, arg3, arg4Copy, arg5, arg6, arg7})
	stub := fake.AddRoutesStub
	fakeReturns := fake.addRoutesReturns
	fake.recordInvocation("AddRoutes", []interface{}{arg1, arg2, arg3, arg4Copy, arg5, arg6, arg7})
	fake.addRoutesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRouteClient) AddRoutesCallCount() int {
	fake.addRoutesMutex.RLock()
	defer fake.addRoutesMutex.RUnlock()
	return len(fake.addRoutesArgsForCall)
}

func (fake *FakeRouteClient) AddRoutesCalls(stub func(context.Context, *string, *string, []*string, string, string, logr.Logger) error) {
	fake.addRoutesMutex.Lock()
	defer fake.addRoutesMutex.Unlock()
	fake.AddRoutesStub = stub
}

func (fake *FakeRouteClient) AddRoutesArgsForCall(i int) (context.Context, *string, *string, []*string, string, string, logr.Logger) {
	fake.addRoutesMutex.RLock()
	defer fake.addRoutesMutex.RUnlock()
	argsForCall := fake.addRoutesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7
}

func (fake *FakeRouteClient) AddRoutesReturns(result1 error) {
	fake.addRoutesMutex.Lock()
	defer fake.addRoutesMutex.Unlock()
	fake.AddRoutesStub = nil
	fake.addRoutesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteClient) AddRoutesReturnsOnCall(i int, result1 error) {
	fake.addRoutesMutex.Lock()
	defer fake.addRoutesMutex.Unlock()
	fake.AddRoutesStub = nil
	if fake.addRoutesReturnsOnCall == nil {
		fake.addRoutesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addRoutesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteClient) RemoveRoutes(arg1 context.Context, arg2 *string, arg3 *string, arg4 []*string, arg5 string, arg6 string, arg7 logr.Logger) error {
	var arg4Copy []*string
	if arg4 != nil {
		arg4Copy = make([]*string, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.removeRoutesMutex.Lock()
	ret, specificReturn := fake.removeRoutesReturnsOnCall[len(fake.removeRoutesArgsForCall)]
	fake.removeRoutesArgsForCall = append(fake.removeRoutesArgsForCall, struct {
		arg1 context.Context
		arg2 *string
		arg3 *string
		arg4 []*string
		arg5 string
		arg6 string
		arg7 logr.Logger
	}{arg1, arg2, arg3, arg4Copy, arg5, arg6, arg7})
	stub := fake.RemoveRoutesStub
	fakeReturns := fake.removeRoutesReturns
	fake.recordInvocation("RemoveRoutes", []interface{}{arg1, arg2, arg3, arg4Copy, arg5, arg6, arg7})
	fake.removeRoutesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRouteClient) RemoveRoutesCallCount() int {
	fake.removeRoutesMutex.RLock()
	defer fake.removeRoutesMutex.RUnlock()
	return len(fake.removeRoutesArgsForCall)
}

func (fake *FakeRouteClient) RemoveRoutesCalls(stub func(context.Context, *string, *string, []*string, string, string, logr.Logger) error) {
	fake.removeRoutesMutex.Lock()
	defer fake.removeRoutesMutex.Unlock()
	fake.RemoveRoutesStub = stub
}

func (fake *FakeRouteClient) RemoveRoutesArgsForCall(i int) (context.Context, *string, *string, []*string, string, string, logr.Logger) {
	fake.removeRoutesMutex.RLock()
	defer fake.removeRoutesMutex.RUnlock()
	argsForCall := fake.removeRoutesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7
}

func (fake *FakeRouteClient) RemoveRoutesReturns(result1 error) {
	fake.removeRoutesMutex.Lock()
	defer fake.removeRoutesMutex.Unlock()
	fake.RemoveRoutesStub = nil
	fake.removeRoutesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteClient) RemoveRoutesReturnsOnCall(i int, result1 error) {
	fake.removeRoutesMutex.Lock()
	defer fake.removeRoutesMutex.Unlock()
	fake.RemoveRoutesStub = nil
	if fake.removeRoutesReturnsOnCall == nil {
		fake.removeRoutesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeRoutesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addRoutesMutex.RLock()
	defer fake.addRoutesMutex.RUnlock()
	fake.removeRoutesMutex.RLock()
	defer fake.removeRoutesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRouteClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controllers.RouteClient = new(FakeRouteClient)
