// Code generated by counterfeiter. DO NOT EDIT.
package controllersfakes

import (
	"context"
	"sync"

	"github.com/aws-resolver-rules-operator/controllers"
)

type FakeRoute53ResolverClient struct {
	AssociateResolverRuleWithContextStub        func(context.Context, string, string, string) (string, error)
	associateResolverRuleWithContextMutex       sync.RWMutex
	associateResolverRuleWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	associateResolverRuleWithContextReturns struct {
		result1 string
		result2 error
	}
	associateResolverRuleWithContextReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	CreateResolverEndpointWithContextStub        func(context.Context, string, string, []string, []string) (string, error)
	createResolverEndpointWithContextMutex       sync.RWMutex
	createResolverEndpointWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 []string
		arg5 []string
	}
	createResolverEndpointWithContextReturns struct {
		result1 string
		result2 error
	}
	createResolverEndpointWithContextReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	CreateResolverRuleWithContextStub        func(context.Context, string, string, string, string, []string) (string, error)
	createResolverRuleWithContextMutex       sync.RWMutex
	createResolverRuleWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 []string
	}
	createResolverRuleWithContextReturns struct {
		result1 string
		result2 error
	}
	createResolverRuleWithContextReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRoute53ResolverClient) AssociateResolverRuleWithContext(arg1 context.Context, arg2 string, arg3 string, arg4 string) (string, error) {
	fake.associateResolverRuleWithContextMutex.Lock()
	ret, specificReturn := fake.associateResolverRuleWithContextReturnsOnCall[len(fake.associateResolverRuleWithContextArgsForCall)]
	fake.associateResolverRuleWithContextArgsForCall = append(fake.associateResolverRuleWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.AssociateResolverRuleWithContextStub
	fakeReturns := fake.associateResolverRuleWithContextReturns
	fake.recordInvocation("AssociateResolverRuleWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.associateResolverRuleWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRoute53ResolverClient) AssociateResolverRuleWithContextCallCount() int {
	fake.associateResolverRuleWithContextMutex.RLock()
	defer fake.associateResolverRuleWithContextMutex.RUnlock()
	return len(fake.associateResolverRuleWithContextArgsForCall)
}

func (fake *FakeRoute53ResolverClient) AssociateResolverRuleWithContextCalls(stub func(context.Context, string, string, string) (string, error)) {
	fake.associateResolverRuleWithContextMutex.Lock()
	defer fake.associateResolverRuleWithContextMutex.Unlock()
	fake.AssociateResolverRuleWithContextStub = stub
}

func (fake *FakeRoute53ResolverClient) AssociateResolverRuleWithContextArgsForCall(i int) (context.Context, string, string, string) {
	fake.associateResolverRuleWithContextMutex.RLock()
	defer fake.associateResolverRuleWithContextMutex.RUnlock()
	argsForCall := fake.associateResolverRuleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRoute53ResolverClient) AssociateResolverRuleWithContextReturns(result1 string, result2 error) {
	fake.associateResolverRuleWithContextMutex.Lock()
	defer fake.associateResolverRuleWithContextMutex.Unlock()
	fake.AssociateResolverRuleWithContextStub = nil
	fake.associateResolverRuleWithContextReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeRoute53ResolverClient) AssociateResolverRuleWithContextReturnsOnCall(i int, result1 string, result2 error) {
	fake.associateResolverRuleWithContextMutex.Lock()
	defer fake.associateResolverRuleWithContextMutex.Unlock()
	fake.AssociateResolverRuleWithContextStub = nil
	if fake.associateResolverRuleWithContextReturnsOnCall == nil {
		fake.associateResolverRuleWithContextReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.associateResolverRuleWithContextReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeRoute53ResolverClient) CreateResolverEndpointWithContext(arg1 context.Context, arg2 string, arg3 string, arg4 []string, arg5 []string) (string, error) {
	var arg4Copy []string
	if arg4 != nil {
		arg4Copy = make([]string, len(arg4))
		copy(arg4Copy, arg4)
	}
	var arg5Copy []string
	if arg5 != nil {
		arg5Copy = make([]string, len(arg5))
		copy(arg5Copy, arg5)
	}
	fake.createResolverEndpointWithContextMutex.Lock()
	ret, specificReturn := fake.createResolverEndpointWithContextReturnsOnCall[len(fake.createResolverEndpointWithContextArgsForCall)]
	fake.createResolverEndpointWithContextArgsForCall = append(fake.createResolverEndpointWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 []string
		arg5 []string
	}{arg1, arg2, arg3, arg4Copy, arg5Copy})
	stub := fake.CreateResolverEndpointWithContextStub
	fakeReturns := fake.createResolverEndpointWithContextReturns
	fake.recordInvocation("CreateResolverEndpointWithContext", []interface{}{arg1, arg2, arg3, arg4Copy, arg5Copy})
	fake.createResolverEndpointWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRoute53ResolverClient) CreateResolverEndpointWithContextCallCount() int {
	fake.createResolverEndpointWithContextMutex.RLock()
	defer fake.createResolverEndpointWithContextMutex.RUnlock()
	return len(fake.createResolverEndpointWithContextArgsForCall)
}

func (fake *FakeRoute53ResolverClient) CreateResolverEndpointWithContextCalls(stub func(context.Context, string, string, []string, []string) (string, error)) {
	fake.createResolverEndpointWithContextMutex.Lock()
	defer fake.createResolverEndpointWithContextMutex.Unlock()
	fake.CreateResolverEndpointWithContextStub = stub
}

func (fake *FakeRoute53ResolverClient) CreateResolverEndpointWithContextArgsForCall(i int) (context.Context, string, string, []string, []string) {
	fake.createResolverEndpointWithContextMutex.RLock()
	defer fake.createResolverEndpointWithContextMutex.RUnlock()
	argsForCall := fake.createResolverEndpointWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeRoute53ResolverClient) CreateResolverEndpointWithContextReturns(result1 string, result2 error) {
	fake.createResolverEndpointWithContextMutex.Lock()
	defer fake.createResolverEndpointWithContextMutex.Unlock()
	fake.CreateResolverEndpointWithContextStub = nil
	fake.createResolverEndpointWithContextReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeRoute53ResolverClient) CreateResolverEndpointWithContextReturnsOnCall(i int, result1 string, result2 error) {
	fake.createResolverEndpointWithContextMutex.Lock()
	defer fake.createResolverEndpointWithContextMutex.Unlock()
	fake.CreateResolverEndpointWithContextStub = nil
	if fake.createResolverEndpointWithContextReturnsOnCall == nil {
		fake.createResolverEndpointWithContextReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.createResolverEndpointWithContextReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeRoute53ResolverClient) CreateResolverRuleWithContext(arg1 context.Context, arg2 string, arg3 string, arg4 string, arg5 string, arg6 []string) (string, error) {
	var arg6Copy []string
	if arg6 != nil {
		arg6Copy = make([]string, len(arg6))
		copy(arg6Copy, arg6)
	}
	fake.createResolverRuleWithContextMutex.Lock()
	ret, specificReturn := fake.createResolverRuleWithContextReturnsOnCall[len(fake.createResolverRuleWithContextArgsForCall)]
	fake.createResolverRuleWithContextArgsForCall = append(fake.createResolverRuleWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 []string
	}{arg1, arg2, arg3, arg4, arg5, arg6Copy})
	stub := fake.CreateResolverRuleWithContextStub
	fakeReturns := fake.createResolverRuleWithContextReturns
	fake.recordInvocation("CreateResolverRuleWithContext", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6Copy})
	fake.createResolverRuleWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRoute53ResolverClient) CreateResolverRuleWithContextCallCount() int {
	fake.createResolverRuleWithContextMutex.RLock()
	defer fake.createResolverRuleWithContextMutex.RUnlock()
	return len(fake.createResolverRuleWithContextArgsForCall)
}

func (fake *FakeRoute53ResolverClient) CreateResolverRuleWithContextCalls(stub func(context.Context, string, string, string, string, []string) (string, error)) {
	fake.createResolverRuleWithContextMutex.Lock()
	defer fake.createResolverRuleWithContextMutex.Unlock()
	fake.CreateResolverRuleWithContextStub = stub
}

func (fake *FakeRoute53ResolverClient) CreateResolverRuleWithContextArgsForCall(i int) (context.Context, string, string, string, string, []string) {
	fake.createResolverRuleWithContextMutex.RLock()
	defer fake.createResolverRuleWithContextMutex.RUnlock()
	argsForCall := fake.createResolverRuleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeRoute53ResolverClient) CreateResolverRuleWithContextReturns(result1 string, result2 error) {
	fake.createResolverRuleWithContextMutex.Lock()
	defer fake.createResolverRuleWithContextMutex.Unlock()
	fake.CreateResolverRuleWithContextStub = nil
	fake.createResolverRuleWithContextReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeRoute53ResolverClient) CreateResolverRuleWithContextReturnsOnCall(i int, result1 string, result2 error) {
	fake.createResolverRuleWithContextMutex.Lock()
	defer fake.createResolverRuleWithContextMutex.Unlock()
	fake.CreateResolverRuleWithContextStub = nil
	if fake.createResolverRuleWithContextReturnsOnCall == nil {
		fake.createResolverRuleWithContextReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.createResolverRuleWithContextReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeRoute53ResolverClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.associateResolverRuleWithContextMutex.RLock()
	defer fake.associateResolverRuleWithContextMutex.RUnlock()
	fake.createResolverEndpointWithContextMutex.RLock()
	defer fake.createResolverEndpointWithContextMutex.RUnlock()
	fake.createResolverRuleWithContextMutex.RLock()
	defer fake.createResolverRuleWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRoute53ResolverClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controllers.Route53ResolverClient = new(FakeRoute53ResolverClient)
