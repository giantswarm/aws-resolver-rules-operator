// Code generated by counterfeiter. DO NOT EDIT.
package controllersfakes

import (
	"context"
	"sync"

	"github.com/aws-resolver-rules-operator/controllers"
)

type FakeEC2Client struct {
	AuthorizeSecurityGroupIngressWithContextStub        func(context.Context, string, string, int) error
	authorizeSecurityGroupIngressWithContextMutex       sync.RWMutex
	authorizeSecurityGroupIngressWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}
	authorizeSecurityGroupIngressWithContextReturns struct {
		result1 error
	}
	authorizeSecurityGroupIngressWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	CreateSecurityGroupWithContextStub        func(context.Context, string, string, string) (string, error)
	createSecurityGroupWithContextMutex       sync.RWMutex
	createSecurityGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	createSecurityGroupWithContextReturns struct {
		result1 string
		result2 error
	}
	createSecurityGroupWithContextReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEC2Client) AuthorizeSecurityGroupIngressWithContext(arg1 context.Context, arg2 string, arg3 string, arg4 int) error {
	fake.authorizeSecurityGroupIngressWithContextMutex.Lock()
	ret, specificReturn := fake.authorizeSecurityGroupIngressWithContextReturnsOnCall[len(fake.authorizeSecurityGroupIngressWithContextArgsForCall)]
	fake.authorizeSecurityGroupIngressWithContextArgsForCall = append(fake.authorizeSecurityGroupIngressWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}{arg1, arg2, arg3, arg4})
	stub := fake.AuthorizeSecurityGroupIngressWithContextStub
	fakeReturns := fake.authorizeSecurityGroupIngressWithContextReturns
	fake.recordInvocation("AuthorizeSecurityGroupIngressWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.authorizeSecurityGroupIngressWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeEC2Client) AuthorizeSecurityGroupIngressWithContextCallCount() int {
	fake.authorizeSecurityGroupIngressWithContextMutex.RLock()
	defer fake.authorizeSecurityGroupIngressWithContextMutex.RUnlock()
	return len(fake.authorizeSecurityGroupIngressWithContextArgsForCall)
}

func (fake *FakeEC2Client) AuthorizeSecurityGroupIngressWithContextCalls(stub func(context.Context, string, string, int) error) {
	fake.authorizeSecurityGroupIngressWithContextMutex.Lock()
	defer fake.authorizeSecurityGroupIngressWithContextMutex.Unlock()
	fake.AuthorizeSecurityGroupIngressWithContextStub = stub
}

func (fake *FakeEC2Client) AuthorizeSecurityGroupIngressWithContextArgsForCall(i int) (context.Context, string, string, int) {
	fake.authorizeSecurityGroupIngressWithContextMutex.RLock()
	defer fake.authorizeSecurityGroupIngressWithContextMutex.RUnlock()
	argsForCall := fake.authorizeSecurityGroupIngressWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEC2Client) AuthorizeSecurityGroupIngressWithContextReturns(result1 error) {
	fake.authorizeSecurityGroupIngressWithContextMutex.Lock()
	defer fake.authorizeSecurityGroupIngressWithContextMutex.Unlock()
	fake.AuthorizeSecurityGroupIngressWithContextStub = nil
	fake.authorizeSecurityGroupIngressWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2Client) AuthorizeSecurityGroupIngressWithContextReturnsOnCall(i int, result1 error) {
	fake.authorizeSecurityGroupIngressWithContextMutex.Lock()
	defer fake.authorizeSecurityGroupIngressWithContextMutex.Unlock()
	fake.AuthorizeSecurityGroupIngressWithContextStub = nil
	if fake.authorizeSecurityGroupIngressWithContextReturnsOnCall == nil {
		fake.authorizeSecurityGroupIngressWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.authorizeSecurityGroupIngressWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2Client) CreateSecurityGroupWithContext(arg1 context.Context, arg2 string, arg3 string, arg4 string) (string, error) {
	fake.createSecurityGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createSecurityGroupWithContextReturnsOnCall[len(fake.createSecurityGroupWithContextArgsForCall)]
	fake.createSecurityGroupWithContextArgsForCall = append(fake.createSecurityGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.CreateSecurityGroupWithContextStub
	fakeReturns := fake.createSecurityGroupWithContextReturns
	fake.recordInvocation("CreateSecurityGroupWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.createSecurityGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2Client) CreateSecurityGroupWithContextCallCount() int {
	fake.createSecurityGroupWithContextMutex.RLock()
	defer fake.createSecurityGroupWithContextMutex.RUnlock()
	return len(fake.createSecurityGroupWithContextArgsForCall)
}

func (fake *FakeEC2Client) CreateSecurityGroupWithContextCalls(stub func(context.Context, string, string, string) (string, error)) {
	fake.createSecurityGroupWithContextMutex.Lock()
	defer fake.createSecurityGroupWithContextMutex.Unlock()
	fake.CreateSecurityGroupWithContextStub = stub
}

func (fake *FakeEC2Client) CreateSecurityGroupWithContextArgsForCall(i int) (context.Context, string, string, string) {
	fake.createSecurityGroupWithContextMutex.RLock()
	defer fake.createSecurityGroupWithContextMutex.RUnlock()
	argsForCall := fake.createSecurityGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEC2Client) CreateSecurityGroupWithContextReturns(result1 string, result2 error) {
	fake.createSecurityGroupWithContextMutex.Lock()
	defer fake.createSecurityGroupWithContextMutex.Unlock()
	fake.CreateSecurityGroupWithContextStub = nil
	fake.createSecurityGroupWithContextReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2Client) CreateSecurityGroupWithContextReturnsOnCall(i int, result1 string, result2 error) {
	fake.createSecurityGroupWithContextMutex.Lock()
	defer fake.createSecurityGroupWithContextMutex.Unlock()
	fake.CreateSecurityGroupWithContextStub = nil
	if fake.createSecurityGroupWithContextReturnsOnCall == nil {
		fake.createSecurityGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.createSecurityGroupWithContextReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2Client) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authorizeSecurityGroupIngressWithContextMutex.RLock()
	defer fake.authorizeSecurityGroupIngressWithContextMutex.RUnlock()
	fake.createSecurityGroupWithContextMutex.RLock()
	defer fake.createSecurityGroupWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEC2Client) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controllers.EC2Client = new(FakeEC2Client)
