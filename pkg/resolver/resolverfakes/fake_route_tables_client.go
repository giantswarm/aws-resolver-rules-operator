// Code generated by counterfeiter. DO NOT EDIT.
package resolverfakes

import (
	"context"
	"sync"

	"github.com/aws-resolver-rules-operator/pkg/resolver"
	"github.com/aws/aws-sdk-go/service/ec2"
)

type FakeRouteTablesClient struct {
	CreateRouteStub        func(context.Context, *string, *string, *string) error
	createRouteMutex       sync.RWMutex
	createRouteArgsForCall []struct {
		arg1 context.Context
		arg2 *string
		arg3 *string
		arg4 *string
	}
	createRouteReturns struct {
		result1 error
	}
	createRouteReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteRouteStub        func(context.Context, *string, *string) error
	deleteRouteMutex       sync.RWMutex
	deleteRouteArgsForCall []struct {
		arg1 context.Context
		arg2 *string
		arg3 *string
	}
	deleteRouteReturns struct {
		result1 error
	}
	deleteRouteReturnsOnCall map[int]struct {
		result1 error
	}
	GetRouteTablesStub        func(context.Context, []string) ([]*ec2.RouteTable, error)
	getRouteTablesMutex       sync.RWMutex
	getRouteTablesArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	getRouteTablesReturns struct {
		result1 []*ec2.RouteTable
		result2 error
	}
	getRouteTablesReturnsOnCall map[int]struct {
		result1 []*ec2.RouteTable
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRouteTablesClient) CreateRoute(arg1 context.Context, arg2 *string, arg3 *string, arg4 *string) error {
	fake.createRouteMutex.Lock()
	ret, specificReturn := fake.createRouteReturnsOnCall[len(fake.createRouteArgsForCall)]
	fake.createRouteArgsForCall = append(fake.createRouteArgsForCall, struct {
		arg1 context.Context
		arg2 *string
		arg3 *string
		arg4 *string
	}{arg1, arg2, arg3, arg4})
	stub := fake.CreateRouteStub
	fakeReturns := fake.createRouteReturns
	fake.recordInvocation("CreateRoute", []interface{}{arg1, arg2, arg3, arg4})
	fake.createRouteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRouteTablesClient) CreateRouteCallCount() int {
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	return len(fake.createRouteArgsForCall)
}

func (fake *FakeRouteTablesClient) CreateRouteCalls(stub func(context.Context, *string, *string, *string) error) {
	fake.createRouteMutex.Lock()
	defer fake.createRouteMutex.Unlock()
	fake.CreateRouteStub = stub
}

func (fake *FakeRouteTablesClient) CreateRouteArgsForCall(i int) (context.Context, *string, *string, *string) {
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	argsForCall := fake.createRouteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRouteTablesClient) CreateRouteReturns(result1 error) {
	fake.createRouteMutex.Lock()
	defer fake.createRouteMutex.Unlock()
	fake.CreateRouteStub = nil
	fake.createRouteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteTablesClient) CreateRouteReturnsOnCall(i int, result1 error) {
	fake.createRouteMutex.Lock()
	defer fake.createRouteMutex.Unlock()
	fake.CreateRouteStub = nil
	if fake.createRouteReturnsOnCall == nil {
		fake.createRouteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createRouteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteTablesClient) DeleteRoute(arg1 context.Context, arg2 *string, arg3 *string) error {
	fake.deleteRouteMutex.Lock()
	ret, specificReturn := fake.deleteRouteReturnsOnCall[len(fake.deleteRouteArgsForCall)]
	fake.deleteRouteArgsForCall = append(fake.deleteRouteArgsForCall, struct {
		arg1 context.Context
		arg2 *string
		arg3 *string
	}{arg1, arg2, arg3})
	stub := fake.DeleteRouteStub
	fakeReturns := fake.deleteRouteReturns
	fake.recordInvocation("DeleteRoute", []interface{}{arg1, arg2, arg3})
	fake.deleteRouteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRouteTablesClient) DeleteRouteCallCount() int {
	fake.deleteRouteMutex.RLock()
	defer fake.deleteRouteMutex.RUnlock()
	return len(fake.deleteRouteArgsForCall)
}

func (fake *FakeRouteTablesClient) DeleteRouteCalls(stub func(context.Context, *string, *string) error) {
	fake.deleteRouteMutex.Lock()
	defer fake.deleteRouteMutex.Unlock()
	fake.DeleteRouteStub = stub
}

func (fake *FakeRouteTablesClient) DeleteRouteArgsForCall(i int) (context.Context, *string, *string) {
	fake.deleteRouteMutex.RLock()
	defer fake.deleteRouteMutex.RUnlock()
	argsForCall := fake.deleteRouteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRouteTablesClient) DeleteRouteReturns(result1 error) {
	fake.deleteRouteMutex.Lock()
	defer fake.deleteRouteMutex.Unlock()
	fake.DeleteRouteStub = nil
	fake.deleteRouteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteTablesClient) DeleteRouteReturnsOnCall(i int, result1 error) {
	fake.deleteRouteMutex.Lock()
	defer fake.deleteRouteMutex.Unlock()
	fake.DeleteRouteStub = nil
	if fake.deleteRouteReturnsOnCall == nil {
		fake.deleteRouteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteRouteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteTablesClient) GetRouteTables(arg1 context.Context, arg2 []string) ([]*ec2.RouteTable, error) {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.getRouteTablesMutex.Lock()
	ret, specificReturn := fake.getRouteTablesReturnsOnCall[len(fake.getRouteTablesArgsForCall)]
	fake.getRouteTablesArgsForCall = append(fake.getRouteTablesArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2Copy})
	stub := fake.GetRouteTablesStub
	fakeReturns := fake.getRouteTablesReturns
	fake.recordInvocation("GetRouteTables", []interface{}{arg1, arg2Copy})
	fake.getRouteTablesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRouteTablesClient) GetRouteTablesCallCount() int {
	fake.getRouteTablesMutex.RLock()
	defer fake.getRouteTablesMutex.RUnlock()
	return len(fake.getRouteTablesArgsForCall)
}

func (fake *FakeRouteTablesClient) GetRouteTablesCalls(stub func(context.Context, []string) ([]*ec2.RouteTable, error)) {
	fake.getRouteTablesMutex.Lock()
	defer fake.getRouteTablesMutex.Unlock()
	fake.GetRouteTablesStub = stub
}

func (fake *FakeRouteTablesClient) GetRouteTablesArgsForCall(i int) (context.Context, []string) {
	fake.getRouteTablesMutex.RLock()
	defer fake.getRouteTablesMutex.RUnlock()
	argsForCall := fake.getRouteTablesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRouteTablesClient) GetRouteTablesReturns(result1 []*ec2.RouteTable, result2 error) {
	fake.getRouteTablesMutex.Lock()
	defer fake.getRouteTablesMutex.Unlock()
	fake.GetRouteTablesStub = nil
	fake.getRouteTablesReturns = struct {
		result1 []*ec2.RouteTable
		result2 error
	}{result1, result2}
}

func (fake *FakeRouteTablesClient) GetRouteTablesReturnsOnCall(i int, result1 []*ec2.RouteTable, result2 error) {
	fake.getRouteTablesMutex.Lock()
	defer fake.getRouteTablesMutex.Unlock()
	fake.GetRouteTablesStub = nil
	if fake.getRouteTablesReturnsOnCall == nil {
		fake.getRouteTablesReturnsOnCall = make(map[int]struct {
			result1 []*ec2.RouteTable
			result2 error
		})
	}
	fake.getRouteTablesReturnsOnCall[i] = struct {
		result1 []*ec2.RouteTable
		result2 error
	}{result1, result2}
}

func (fake *FakeRouteTablesClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	fake.deleteRouteMutex.RLock()
	defer fake.deleteRouteMutex.RUnlock()
	fake.getRouteTablesMutex.RLock()
	defer fake.getRouteTablesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRouteTablesClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resolver.RouteTablesClient = new(FakeRouteTablesClient)
