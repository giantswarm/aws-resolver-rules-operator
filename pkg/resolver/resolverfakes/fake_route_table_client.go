// Code generated by counterfeiter. DO NOT EDIT.
package resolverfakes

import (
	"context"
	"sync"

	"github.com/aws-resolver-rules-operator/pkg/resolver"
)

type FakeRouteTableClient struct {
	AddRoutesStub        func(context.Context, resolver.RouteRule, resolver.Filter) error
	addRoutesMutex       sync.RWMutex
	addRoutesArgsForCall []struct {
		arg1 context.Context
		arg2 resolver.RouteRule
		arg3 resolver.Filter
	}
	addRoutesReturns struct {
		result1 error
	}
	addRoutesReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveRoutesStub        func(context.Context, resolver.RouteRule, resolver.Filter) error
	removeRoutesMutex       sync.RWMutex
	removeRoutesArgsForCall []struct {
		arg1 context.Context
		arg2 resolver.RouteRule
		arg3 resolver.Filter
	}
	removeRoutesReturns struct {
		result1 error
	}
	removeRoutesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRouteTableClient) AddRoutes(arg1 context.Context, arg2 resolver.RouteRule, arg3 resolver.Filter) error {
	fake.addRoutesMutex.Lock()
	ret, specificReturn := fake.addRoutesReturnsOnCall[len(fake.addRoutesArgsForCall)]
	fake.addRoutesArgsForCall = append(fake.addRoutesArgsForCall, struct {
		arg1 context.Context
		arg2 resolver.RouteRule
		arg3 resolver.Filter
	}{arg1, arg2, arg3})
	stub := fake.AddRoutesStub
	fakeReturns := fake.addRoutesReturns
	fake.recordInvocation("AddRoutes", []interface{}{arg1, arg2, arg3})
	fake.addRoutesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRouteTableClient) AddRoutesCallCount() int {
	fake.addRoutesMutex.RLock()
	defer fake.addRoutesMutex.RUnlock()
	return len(fake.addRoutesArgsForCall)
}

func (fake *FakeRouteTableClient) AddRoutesCalls(stub func(context.Context, resolver.RouteRule, resolver.Filter) error) {
	fake.addRoutesMutex.Lock()
	defer fake.addRoutesMutex.Unlock()
	fake.AddRoutesStub = stub
}

func (fake *FakeRouteTableClient) AddRoutesArgsForCall(i int) (context.Context, resolver.RouteRule, resolver.Filter) {
	fake.addRoutesMutex.RLock()
	defer fake.addRoutesMutex.RUnlock()
	argsForCall := fake.addRoutesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRouteTableClient) AddRoutesReturns(result1 error) {
	fake.addRoutesMutex.Lock()
	defer fake.addRoutesMutex.Unlock()
	fake.AddRoutesStub = nil
	fake.addRoutesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteTableClient) AddRoutesReturnsOnCall(i int, result1 error) {
	fake.addRoutesMutex.Lock()
	defer fake.addRoutesMutex.Unlock()
	fake.AddRoutesStub = nil
	if fake.addRoutesReturnsOnCall == nil {
		fake.addRoutesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addRoutesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteTableClient) RemoveRoutes(arg1 context.Context, arg2 resolver.RouteRule, arg3 resolver.Filter) error {
	fake.removeRoutesMutex.Lock()
	ret, specificReturn := fake.removeRoutesReturnsOnCall[len(fake.removeRoutesArgsForCall)]
	fake.removeRoutesArgsForCall = append(fake.removeRoutesArgsForCall, struct {
		arg1 context.Context
		arg2 resolver.RouteRule
		arg3 resolver.Filter
	}{arg1, arg2, arg3})
	stub := fake.RemoveRoutesStub
	fakeReturns := fake.removeRoutesReturns
	fake.recordInvocation("RemoveRoutes", []interface{}{arg1, arg2, arg3})
	fake.removeRoutesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRouteTableClient) RemoveRoutesCallCount() int {
	fake.removeRoutesMutex.RLock()
	defer fake.removeRoutesMutex.RUnlock()
	return len(fake.removeRoutesArgsForCall)
}

func (fake *FakeRouteTableClient) RemoveRoutesCalls(stub func(context.Context, resolver.RouteRule, resolver.Filter) error) {
	fake.removeRoutesMutex.Lock()
	defer fake.removeRoutesMutex.Unlock()
	fake.RemoveRoutesStub = stub
}

func (fake *FakeRouteTableClient) RemoveRoutesArgsForCall(i int) (context.Context, resolver.RouteRule, resolver.Filter) {
	fake.removeRoutesMutex.RLock()
	defer fake.removeRoutesMutex.RUnlock()
	argsForCall := fake.removeRoutesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRouteTableClient) RemoveRoutesReturns(result1 error) {
	fake.removeRoutesMutex.Lock()
	defer fake.removeRoutesMutex.Unlock()
	fake.RemoveRoutesStub = nil
	fake.removeRoutesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteTableClient) RemoveRoutesReturnsOnCall(i int, result1 error) {
	fake.removeRoutesMutex.Lock()
	defer fake.removeRoutesMutex.Unlock()
	fake.RemoveRoutesStub = nil
	if fake.removeRoutesReturnsOnCall == nil {
		fake.removeRoutesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeRoutesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteTableClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRouteTableClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resolver.RouteTableClient = new(FakeRouteTableClient)
