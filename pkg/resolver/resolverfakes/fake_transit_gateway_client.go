// Code generated by counterfeiter. DO NOT EDIT.
package resolverfakes

import (
	"context"
	"sync"

	"github.com/aws-resolver-rules-operator/pkg/resolver"
)

type FakeTransitGatewayClient struct {
	ApplyStub        func(context.Context, string, map[string]string) (string, error)
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 map[string]string
	}
	applyReturns struct {
		result1 string
		result2 error
	}
	applyReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ApplyAttachmentStub        func(context.Context, resolver.TransitGatewayAttachment) error
	applyAttachmentMutex       sync.RWMutex
	applyAttachmentArgsForCall []struct {
		arg1 context.Context
		arg2 resolver.TransitGatewayAttachment
	}
	applyAttachmentReturns struct {
		result1 error
	}
	applyAttachmentReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(context.Context, string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	DetachStub        func(context.Context, resolver.TransitGatewayAttachment) error
	detachMutex       sync.RWMutex
	detachArgsForCall []struct {
		arg1 context.Context
		arg2 resolver.TransitGatewayAttachment
	}
	detachReturns struct {
		result1 error
	}
	detachReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTransitGatewayClient) Apply(arg1 context.Context, arg2 string, arg3 map[string]string) (string, error) {
	fake.applyMutex.Lock()
	ret, specificReturn := fake.applyReturnsOnCall[len(fake.applyArgsForCall)]
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 map[string]string
	}{arg1, arg2, arg3})
	stub := fake.ApplyStub
	fakeReturns := fake.applyReturns
	fake.recordInvocation("Apply", []interface{}{arg1, arg2, arg3})
	fake.applyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTransitGatewayClient) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *FakeTransitGatewayClient) ApplyCalls(stub func(context.Context, string, map[string]string) (string, error)) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = stub
}

func (fake *FakeTransitGatewayClient) ApplyArgsForCall(i int) (context.Context, string, map[string]string) {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	argsForCall := fake.applyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTransitGatewayClient) ApplyReturns(result1 string, result2 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTransitGatewayClient) ApplyReturnsOnCall(i int, result1 string, result2 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	if fake.applyReturnsOnCall == nil {
		fake.applyReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.applyReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTransitGatewayClient) ApplyAttachment(arg1 context.Context, arg2 resolver.TransitGatewayAttachment) error {
	fake.applyAttachmentMutex.Lock()
	ret, specificReturn := fake.applyAttachmentReturnsOnCall[len(fake.applyAttachmentArgsForCall)]
	fake.applyAttachmentArgsForCall = append(fake.applyAttachmentArgsForCall, struct {
		arg1 context.Context
		arg2 resolver.TransitGatewayAttachment
	}{arg1, arg2})
	stub := fake.ApplyAttachmentStub
	fakeReturns := fake.applyAttachmentReturns
	fake.recordInvocation("ApplyAttachment", []interface{}{arg1, arg2})
	fake.applyAttachmentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTransitGatewayClient) ApplyAttachmentCallCount() int {
	fake.applyAttachmentMutex.RLock()
	defer fake.applyAttachmentMutex.RUnlock()
	return len(fake.applyAttachmentArgsForCall)
}

func (fake *FakeTransitGatewayClient) ApplyAttachmentCalls(stub func(context.Context, resolver.TransitGatewayAttachment) error) {
	fake.applyAttachmentMutex.Lock()
	defer fake.applyAttachmentMutex.Unlock()
	fake.ApplyAttachmentStub = stub
}

func (fake *FakeTransitGatewayClient) ApplyAttachmentArgsForCall(i int) (context.Context, resolver.TransitGatewayAttachment) {
	fake.applyAttachmentMutex.RLock()
	defer fake.applyAttachmentMutex.RUnlock()
	argsForCall := fake.applyAttachmentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTransitGatewayClient) ApplyAttachmentReturns(result1 error) {
	fake.applyAttachmentMutex.Lock()
	defer fake.applyAttachmentMutex.Unlock()
	fake.ApplyAttachmentStub = nil
	fake.applyAttachmentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransitGatewayClient) ApplyAttachmentReturnsOnCall(i int, result1 error) {
	fake.applyAttachmentMutex.Lock()
	defer fake.applyAttachmentMutex.Unlock()
	fake.ApplyAttachmentStub = nil
	if fake.applyAttachmentReturnsOnCall == nil {
		fake.applyAttachmentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyAttachmentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransitGatewayClient) Delete(arg1 context.Context, arg2 string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTransitGatewayClient) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeTransitGatewayClient) DeleteCalls(stub func(context.Context, string) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeTransitGatewayClient) DeleteArgsForCall(i int) (context.Context, string) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTransitGatewayClient) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransitGatewayClient) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransitGatewayClient) Detach(arg1 context.Context, arg2 resolver.TransitGatewayAttachment) error {
	fake.detachMutex.Lock()
	ret, specificReturn := fake.detachReturnsOnCall[len(fake.detachArgsForCall)]
	fake.detachArgsForCall = append(fake.detachArgsForCall, struct {
		arg1 context.Context
		arg2 resolver.TransitGatewayAttachment
	}{arg1, arg2})
	stub := fake.DetachStub
	fakeReturns := fake.detachReturns
	fake.recordInvocation("Detach", []interface{}{arg1, arg2})
	fake.detachMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTransitGatewayClient) DetachCallCount() int {
	fake.detachMutex.RLock()
	defer fake.detachMutex.RUnlock()
	return len(fake.detachArgsForCall)
}

func (fake *FakeTransitGatewayClient) DetachCalls(stub func(context.Context, resolver.TransitGatewayAttachment) error) {
	fake.detachMutex.Lock()
	defer fake.detachMutex.Unlock()
	fake.DetachStub = stub
}

func (fake *FakeTransitGatewayClient) DetachArgsForCall(i int) (context.Context, resolver.TransitGatewayAttachment) {
	fake.detachMutex.RLock()
	defer fake.detachMutex.RUnlock()
	argsForCall := fake.detachArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTransitGatewayClient) DetachReturns(result1 error) {
	fake.detachMutex.Lock()
	defer fake.detachMutex.Unlock()
	fake.DetachStub = nil
	fake.detachReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransitGatewayClient) DetachReturnsOnCall(i int, result1 error) {
	fake.detachMutex.Lock()
	defer fake.detachMutex.Unlock()
	fake.DetachStub = nil
	if fake.detachReturnsOnCall == nil {
		fake.detachReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.detachReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransitGatewayClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	fake.applyAttachmentMutex.RLock()
	defer fake.applyAttachmentMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.detachMutex.RLock()
	defer fake.detachMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTransitGatewayClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resolver.TransitGatewayClient = new(FakeTransitGatewayClient)
