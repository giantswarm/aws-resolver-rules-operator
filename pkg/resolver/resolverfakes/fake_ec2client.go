// Code generated by counterfeiter. DO NOT EDIT.
package resolverfakes

import (
	"context"
	"sync"

	"github.com/aws-resolver-rules-operator/pkg/resolver"
)

type FakeEC2Client struct {
	CreateSecurityGroupForResolverEndpointsStub        func(context.Context, string, string) (string, error)
	createSecurityGroupForResolverEndpointsMutex       sync.RWMutex
	createSecurityGroupForResolverEndpointsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	createSecurityGroupForResolverEndpointsReturns struct {
		result1 string
		result2 error
	}
	createSecurityGroupForResolverEndpointsReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEC2Client) CreateSecurityGroupForResolverEndpoints(arg1 context.Context, arg2 string, arg3 string) (string, error) {
	fake.createSecurityGroupForResolverEndpointsMutex.Lock()
	ret, specificReturn := fake.createSecurityGroupForResolverEndpointsReturnsOnCall[len(fake.createSecurityGroupForResolverEndpointsArgsForCall)]
	fake.createSecurityGroupForResolverEndpointsArgsForCall = append(fake.createSecurityGroupForResolverEndpointsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.CreateSecurityGroupForResolverEndpointsStub
	fakeReturns := fake.createSecurityGroupForResolverEndpointsReturns
	fake.recordInvocation("CreateSecurityGroupForResolverEndpoints", []interface{}{arg1, arg2, arg3})
	fake.createSecurityGroupForResolverEndpointsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2Client) CreateSecurityGroupForResolverEndpointsCallCount() int {
	fake.createSecurityGroupForResolverEndpointsMutex.RLock()
	defer fake.createSecurityGroupForResolverEndpointsMutex.RUnlock()
	return len(fake.createSecurityGroupForResolverEndpointsArgsForCall)
}

func (fake *FakeEC2Client) CreateSecurityGroupForResolverEndpointsCalls(stub func(context.Context, string, string) (string, error)) {
	fake.createSecurityGroupForResolverEndpointsMutex.Lock()
	defer fake.createSecurityGroupForResolverEndpointsMutex.Unlock()
	fake.CreateSecurityGroupForResolverEndpointsStub = stub
}

func (fake *FakeEC2Client) CreateSecurityGroupForResolverEndpointsArgsForCall(i int) (context.Context, string, string) {
	fake.createSecurityGroupForResolverEndpointsMutex.RLock()
	defer fake.createSecurityGroupForResolverEndpointsMutex.RUnlock()
	argsForCall := fake.createSecurityGroupForResolverEndpointsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2Client) CreateSecurityGroupForResolverEndpointsReturns(result1 string, result2 error) {
	fake.createSecurityGroupForResolverEndpointsMutex.Lock()
	defer fake.createSecurityGroupForResolverEndpointsMutex.Unlock()
	fake.CreateSecurityGroupForResolverEndpointsStub = nil
	fake.createSecurityGroupForResolverEndpointsReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2Client) CreateSecurityGroupForResolverEndpointsReturnsOnCall(i int, result1 string, result2 error) {
	fake.createSecurityGroupForResolverEndpointsMutex.Lock()
	defer fake.createSecurityGroupForResolverEndpointsMutex.Unlock()
	fake.CreateSecurityGroupForResolverEndpointsStub = nil
	if fake.createSecurityGroupForResolverEndpointsReturnsOnCall == nil {
		fake.createSecurityGroupForResolverEndpointsReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.createSecurityGroupForResolverEndpointsReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2Client) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createSecurityGroupForResolverEndpointsMutex.RLock()
	defer fake.createSecurityGroupForResolverEndpointsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEC2Client) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resolver.EC2Client = new(FakeEC2Client)
