// Code generated by counterfeiter. DO NOT EDIT.
package resolverfakes

import (
	"context"
	"sync"

	"github.com/aws-resolver-rules-operator/pkg/resolver"
)

type FakePrefixListClient struct {
	ApplyStub        func(context.Context, string, map[string]string) (string, error)
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 map[string]string
	}
	applyReturns struct {
		result1 string
		result2 error
	}
	applyReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ApplyEntryStub        func(context.Context, resolver.PrefixListEntry) error
	applyEntryMutex       sync.RWMutex
	applyEntryArgsForCall []struct {
		arg1 context.Context
		arg2 resolver.PrefixListEntry
	}
	applyEntryReturns struct {
		result1 error
	}
	applyEntryReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(context.Context, string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteEntryStub        func(context.Context, resolver.PrefixListEntry) error
	deleteEntryMutex       sync.RWMutex
	deleteEntryArgsForCall []struct {
		arg1 context.Context
		arg2 resolver.PrefixListEntry
	}
	deleteEntryReturns struct {
		result1 error
	}
	deleteEntryReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePrefixListClient) Apply(arg1 context.Context, arg2 string, arg3 map[string]string) (string, error) {
	fake.applyMutex.Lock()
	ret, specificReturn := fake.applyReturnsOnCall[len(fake.applyArgsForCall)]
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 map[string]string
	}{arg1, arg2, arg3})
	stub := fake.ApplyStub
	fakeReturns := fake.applyReturns
	fake.recordInvocation("Apply", []interface{}{arg1, arg2, arg3})
	fake.applyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePrefixListClient) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *FakePrefixListClient) ApplyCalls(stub func(context.Context, string, map[string]string) (string, error)) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = stub
}

func (fake *FakePrefixListClient) ApplyArgsForCall(i int) (context.Context, string, map[string]string) {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	argsForCall := fake.applyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePrefixListClient) ApplyReturns(result1 string, result2 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePrefixListClient) ApplyReturnsOnCall(i int, result1 string, result2 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	if fake.applyReturnsOnCall == nil {
		fake.applyReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.applyReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePrefixListClient) ApplyEntry(arg1 context.Context, arg2 resolver.PrefixListEntry) error {
	fake.applyEntryMutex.Lock()
	ret, specificReturn := fake.applyEntryReturnsOnCall[len(fake.applyEntryArgsForCall)]
	fake.applyEntryArgsForCall = append(fake.applyEntryArgsForCall, struct {
		arg1 context.Context
		arg2 resolver.PrefixListEntry
	}{arg1, arg2})
	stub := fake.ApplyEntryStub
	fakeReturns := fake.applyEntryReturns
	fake.recordInvocation("ApplyEntry", []interface{}{arg1, arg2})
	fake.applyEntryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePrefixListClient) ApplyEntryCallCount() int {
	fake.applyEntryMutex.RLock()
	defer fake.applyEntryMutex.RUnlock()
	return len(fake.applyEntryArgsForCall)
}

func (fake *FakePrefixListClient) ApplyEntryCalls(stub func(context.Context, resolver.PrefixListEntry) error) {
	fake.applyEntryMutex.Lock()
	defer fake.applyEntryMutex.Unlock()
	fake.ApplyEntryStub = stub
}

func (fake *FakePrefixListClient) ApplyEntryArgsForCall(i int) (context.Context, resolver.PrefixListEntry) {
	fake.applyEntryMutex.RLock()
	defer fake.applyEntryMutex.RUnlock()
	argsForCall := fake.applyEntryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePrefixListClient) ApplyEntryReturns(result1 error) {
	fake.applyEntryMutex.Lock()
	defer fake.applyEntryMutex.Unlock()
	fake.ApplyEntryStub = nil
	fake.applyEntryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePrefixListClient) ApplyEntryReturnsOnCall(i int, result1 error) {
	fake.applyEntryMutex.Lock()
	defer fake.applyEntryMutex.Unlock()
	fake.ApplyEntryStub = nil
	if fake.applyEntryReturnsOnCall == nil {
		fake.applyEntryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyEntryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePrefixListClient) Delete(arg1 context.Context, arg2 string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePrefixListClient) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakePrefixListClient) DeleteCalls(stub func(context.Context, string) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakePrefixListClient) DeleteArgsForCall(i int) (context.Context, string) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePrefixListClient) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePrefixListClient) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePrefixListClient) DeleteEntry(arg1 context.Context, arg2 resolver.PrefixListEntry) error {
	fake.deleteEntryMutex.Lock()
	ret, specificReturn := fake.deleteEntryReturnsOnCall[len(fake.deleteEntryArgsForCall)]
	fake.deleteEntryArgsForCall = append(fake.deleteEntryArgsForCall, struct {
		arg1 context.Context
		arg2 resolver.PrefixListEntry
	}{arg1, arg2})
	stub := fake.DeleteEntryStub
	fakeReturns := fake.deleteEntryReturns
	fake.recordInvocation("DeleteEntry", []interface{}{arg1, arg2})
	fake.deleteEntryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePrefixListClient) DeleteEntryCallCount() int {
	fake.deleteEntryMutex.RLock()
	defer fake.deleteEntryMutex.RUnlock()
	return len(fake.deleteEntryArgsForCall)
}

func (fake *FakePrefixListClient) DeleteEntryCalls(stub func(context.Context, resolver.PrefixListEntry) error) {
	fake.deleteEntryMutex.Lock()
	defer fake.deleteEntryMutex.Unlock()
	fake.DeleteEntryStub = stub
}

func (fake *FakePrefixListClient) DeleteEntryArgsForCall(i int) (context.Context, resolver.PrefixListEntry) {
	fake.deleteEntryMutex.RLock()
	defer fake.deleteEntryMutex.RUnlock()
	argsForCall := fake.deleteEntryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePrefixListClient) DeleteEntryReturns(result1 error) {
	fake.deleteEntryMutex.Lock()
	defer fake.deleteEntryMutex.Unlock()
	fake.DeleteEntryStub = nil
	fake.deleteEntryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePrefixListClient) DeleteEntryReturnsOnCall(i int, result1 error) {
	fake.deleteEntryMutex.Lock()
	defer fake.deleteEntryMutex.Unlock()
	fake.DeleteEntryStub = nil
	if fake.deleteEntryReturnsOnCall == nil {
		fake.deleteEntryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteEntryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePrefixListClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePrefixListClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resolver.PrefixListClient = new(FakePrefixListClient)
